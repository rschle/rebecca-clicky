{"version":3,"sources":["components/CharacterCard/index.js","components/Header/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","onClick","clickCharacter","alt","name","src","image","Header","score","Wrapper","children","App","state","cards","clicked","id","_this","sort","Math","random","indexOf","addScore","push","setState","alert","_this2","this","components_Wrapper","components_Header","map","card","components_CharacterCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"izEAwBeA,MAnBf,SAAuBC,GACnB,OACYC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAASL,EAAMM,gBACjCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,SAErCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,KAAV,IAAgBP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gCCC1CO,MAXf,SAAgBX,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,mBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BAAb,UAA+CJ,EAAMY,uBCDtDC,MAJf,SAAiBb,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMc,WCqE1BC,6MAjEbC,MAAQ,CACNC,QACAL,MAAO,EACPM,QAAS,MAGXZ,eAAiB,SAAAa,GAIf,GAFAC,EAAKJ,MAAMC,MAAMI,KAAK,kBAAMC,KAAKC,SAAW,MAEJ,IAApCH,EAAKJ,MAAME,QAAQM,QAAQL,GAAY,CACzC,IAAIM,EAAWL,EAAKJ,MAAMJ,MAAQ,EAClCQ,EAAKJ,MAAME,QAAQQ,KAAKP,GACxBC,EAAKO,SAAS,CACZT,QAASE,EAAKJ,MAAME,QACpBN,MAAOa,SAGTL,EAAKO,SAAS,CACZf,MAAO,EACPM,QAAS,KAEXU,MAAM,sFAaD,IAAAC,EAAAC,KACP,OACE7B,EAAAC,EAAAC,cAAC4B,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAQpB,MAAOkB,KAAKd,MAAMJ,QAC1BX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZ0B,KAAKd,MAAMC,MAAMgB,IAAI,SAAAC,GAAI,OAExBjC,EAAAC,EAAAC,cAACgC,EAAD,CACE7B,eAAgBuB,EAAKvB,eACrBa,GAAIe,EAAKf,GACTiB,IAAKF,EAAKf,GACVX,KAAM0B,EAAK1B,KACXE,MAAOwB,EAAKxB,mBAhDR2B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.01b6846f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction CharacterCard(props) {\n    return (\n                <div className=\"col-md-3\">\n                    <div className=\"card\" onClick={props.clickCharacter}>\n                        <div className=\"img-container\">\n                            <img alt={props.name} src={props.image} />\n                        </div>\n                        <div className=\"content\">\n                            <p>{props.name} <i className=\"fas fa-ice-cream\"></i></p>\n                        </div>\n                    </div>\n                </div>\n                \n        \n\n\n    );\n}\n\nexport default CharacterCard;\n","import React from \"react\";\nimport \"./style.css\"\n\nfunction Header(props) {\n    return (\n        <div className=\"container\">\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <p className=\"navbar-brand\" >Stranger Clicks</p>\n                <p className=\"nav-item col text-right\">Score: {props.score}</p>\n            </nav>\n        </div>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport CharacterCard from \"./components/CharacterCard\"\nimport Header from './components/Header';\nimport cards from \"./cards.json\"\nimport Wrapper from \"./components/Wrapper\"\n\n\nclass App extends Component {\n  state = {\n    cards,\n    score: 0,\n    clicked: []\n  };\n\n  clickCharacter = id => {\n\n    this.state.cards.sort(() => Math.random() - 0.5)\n\n    if (this.state.clicked.indexOf(id) === -1) {\n      let addScore = this.state.score + 1;\n      this.state.clicked.push(id)\n      this.setState({\n        clicked: this.state.clicked,\n        score: addScore\n      })\n    } else {\n      this.setState({\n        score: 0,\n        clicked: []\n      })\n      alert(\"You lose!\")\n    }\n  }\n\n  // shuffle = array => {\n  //   var length = array.length;\n  //   var randomIndex;\n\n  //   if(array.length > 0) {\n\n  //   }\n  // }\n\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} /> \n        <div className=\"row\">\n          {this.state.cards.map(card => (\n\n            <CharacterCard\n              clickCharacter={this.clickCharacter}\n              id={card.id}\n              key={card.id}\n              name={card.name}\n              image={card.image}\n            />\n          ))}\n        </div>\n\n      </Wrapper>\n    )\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//      <Header />\n//     </div>\n//   );\n// } \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}